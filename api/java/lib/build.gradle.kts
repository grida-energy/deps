/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/9.0.0/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the java-library plugin for API and implementation separation.
    `java-library`
    `maven-publish`
    signing
    id("com.google.protobuf") version "0.9.4"
}

group = "io.github.grida-energy"
version = "1.0.1"

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation(libs.junit.jupiter)

    testRuntimeOnly("org.junit.platform:junit-platform-launcher")

    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api(libs.commons.math3)

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation(libs.guava)
    implementation("com.google.protobuf:protobuf-java:4.26.1")
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

tasks.named<Test>("test") {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

sourceSets {
    main {
        proto {
            srcDir("$projectDir/../../protos")
        }
    }
}

buildscript {
    dependencies {
        classpath("com.google.protobuf:protobuf-gradle-plugin:0.9.4")
    }
}

tasks {
    getByName<Delete>("clean") {
        // delete.add("$projectDir/src/main/deps")
        // delete.add("$projectDir/src/main/grpc")
        // delete.add("$projectDir/src/main/java/internal")
        // delete.add("$projectDir/src/main/java/io")
    }
    getByName("processResources") {
        dependsOn("generateProto")
    }
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:4.26.1"
    }
    // generatedFilesBaseDir = "$projectDir/src"
}

publishing {
    publications {
        
        create<MavenPublication>("maven") {
            from(components["java"])
            groupId = project.group.toString()
            artifactId = "deps"
            version = project.version.toString()

            pom {
                name.set("DEPS - Distributed Energy Protocol System")
                description.set("Common data model for distributed energy devices and systems.")
                url.set("https://github.com/grida-energy/deps")

                licenses {
                    license {
                        name.set("MIT License")
                        url.set("https://opensource.org/licenses/MIT")
                    }
                }
                developers {
                    developer {
                        id.set("mark.ahn")
                        name.set("Mark Ahn")
                        email.set("mark.ahn@gridaenergy.com")
                    }
                }
                scm {
                    url.set("https://github.com/grida-energy/deps")
                    connection.set("scm:git:git://github.com/grida-energy/deps.git")
                    developerConnection.set("scm:git:ssh://github.com/grida-energy/deps.git")
                }
            }
        }
    }
    repositories{
        // maven {
        //     name = "GitHubPackages"
        //     url = uri("https://maven.pkg.github.com/grida-energy/deps")
        //     credentials {
        //         username = System.getenv("USERNAME")
        //         password = System.getenv("TOKEN")
        //     }
        // }
        maven {
            name = "CentralPortal"
            url = uri("https://central.sonatype.com/api/v1/publish")
            credentials {
                username = (project.findProperty("mavenCentralUsername") as String?)
                    ?: System.getenv("MAVEN_CENTRAL_USERNAME")
                password = (project.findProperty("mavenCentralPassword") as String?)
                    ?: System.getenv("MAVEN_CENTRAL_PASSWORD")
            }
        }
    }
}

signing {
    useInMemoryPgpKeys(
        (project.findProperty("signingKeyId") as String?)
            ?: System.getenv("SIGNING_KEY_ID"),
        (project.findProperty("signingKey") as String?)
            ?: System.getenv("SIGNING_KEY"),
        (project.findProperty("signingKeyPassword") as String?)
            ?: System.getenv("SIGNING_KEY_PASSWORD")
    )
    sign(publishing.publications["mavenJava"])
}